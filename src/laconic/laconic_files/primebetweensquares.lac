/* test if there is at least one prime number between two squre numbers*/
func zero(x) {
    x = 0;
    return;
}

func one(x) {
    x = 1;
    return;
}

func incr(x) {
    x = x + 1;
    return;
}

func decr(x) {
    x = x - 1;
    return;
}

/* Computes x modulo y */
func modulus(x, y, out) {
    out = x;
    
    while (out >= y) {
        out = out - y;
    }
    
    return;
}

func square(x, y) {
    y = x * x;
    return;
}

/* Figures out if x is prime, and puts the output in y */
/* Does not modify x, modifies y */
func isPrime(x, h, y) {
    if (x == 1) {
        zero(y);
        return;
    }
    
    y = 2;
    
    while (x > y) {
        modulus(x, y, h);
    
        if (h == 0) {
            zero(y);
            return;
        }
        incr(y);
    }
    
    return;
}

int n;
int m;
int p;
int h;
int FoundPrime;

FoundPrime = 1;
n = 0;

while (FoundPrime) {
    zero(FoundPrime);
    n = n + 1;
    square(n, p);
    p = p + 1; /* initlize p=n^2+1*/
    m = n + 1;
    square(m, m); /* initlize m=(n+1)^2 */
    while (!FoundPrime & p < m ) {    
        isPrime(p, h, FoundPrime);
        incr(p);
    }
    decr(p);
    print p;
}

halt;