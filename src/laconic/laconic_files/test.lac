func pair(in1, in2, out) {
    out = (in1 + in2) * (in1 + in2 + 1) / 2 + in2;
    out = out + 1;
	return;
}

func unpair(out1, out2, in, t0, t1) {
    in = in - 1;
    t0 = 0;
    t1 = 0; /* invariant: t1 = t0 * (t0 + 1) / 2 */
    while (in >= t1) {
        t0 = t0 + 1;
        t1 = t1 + t0;
    }
    t1 = t1 - t0;
    t0 = t0 - 1;
    out2 = in - t1;
    out1 = t0 - out2;
    return;	
}

func init_stack(stack) {
	stack = 0;
	return;
}

func stack_push(stack, var) {
   pair(stack, var, stack);
   return;
}

func stack_pop(var, stack, t0, t1) {
   unpair(stack, var, stack, t0, t1);
   return;
}

func log_with_remainder(value, base, log, remainder, q) {
    log = 0;
    remainder = 0;
    q = base;

    while (q <= value) {
        q = base * q;
        incr(log);
    }
    remainder = value - q / base;
    return;
}

/* global temp variable */
int t0;
int t1;


int i1;
int i2;
int stack;


i1 = 5;
i2 = 16;

log_with_remainder(i1, i2, t0, t1, stack);
print t0;
print t1;

halt;
