/* global temp variable */
int t0;
int t1;


func pair(out, in1, in2) {
    out = in2 + (in1 + in2) * (in1 + in2 + 1) / 2;
    return;
}

func unpair(out1, out2, in, t0, t1) {
    t0 = 0;
    t1 = 0; /* invariant: t1 = t0 * (t0 + 1) / 2 */
    while (in >= t1) {
        t0 = t0 + 1;
        t1 = t1 + t0;
    }
    t1 = t1 - t0;
    t0 = t0 - 1;
    out2 = in - t1;
    out1 = t0 - out2;
    return;	
}

func init_stack(stack) {
	stack = 0;
	return;
}

func stack_push(stack, var, t0) {
   t0 = var + 1;   
   pair(stack, t0, stack);
   return;
}

func stack_pop(var, stack, t0, t1) {
   unpair(var, stack, stack, t0, t1);
   var = var - 1;
   return;
}


int i1;
int i2;
int stack;
int temp;

init_stack(stack);
print stack;


i2 = 4;
while (i2 > 0){
    i1 = 0;
    stack_push(stack, i2, t0);
    i2 = i2 - 1;
}

while (stack > 0) {
    stack_pop(i1, stack, t0, t1);
    print i1;
    i2 = i2 + 1;
}

halt;
