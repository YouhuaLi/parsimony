/* ackermann function */

func decr(x) {
    x = x - 1;
    return;
}

func incr(x) {
    x = x + 1;
    return;
}

/* add an element i into stack s */
func stack_add(s, i) {
     s = s^i;
     return;
}

/* pop element from stask s */
/* element is the element poped*/
func stack_pop(l, t, n, size, element) {
  n = 0;
  t = [];
  size = #l;
  decr(size);
  while ( n < size ) {
      element = l@n;
      t = t^element;
      incr(n);
  }
  element = l@n;
  l = t;
  return;
}

/* ackermann funciton in non-recursive way. result will be stored in variable n */
/* ref to: https://stackoverflow.com/questions/10742322/how-to-rewrite-ackermann-function-in-non-recursive-style */
func ackermann(m, n, l, t, index, size, element, original_m, original_n) {
    original_m = m;
    original_n = n;
    stack_add(l, m);
    size = #l;
    while (size > 0){
      stack_pop(l, t, index, size, element);
      decr(size);
      m = element;
      if( original_m==0 ){
          incr(n);
          n = n + m;
      }
      if( original_m >0 & original_n==0 ){
          incr(n);
          decr(m);
          stack_add(l, m);
          incr(size);
      }
      if(original_m > 0 & original_n >0){
          decr(m);
          stack_add(l, m);
          size = size + 1;
          m = m + 1;
          stack_add(l, m);
          incr(size);
          decr(n);
      }
      original_m = m;
      original_n = n;
    }
    return;
}


list l;
list t;
int index;
int size;
int element;
int m;
int n;
int original_m;
int original_n;

m = 5;
n = 5;
n = n + 1;

l = [];
t = [];

ackermann(m, n, l, t, index, size, element, original_m, original_n);

/* n has the result, so n=A(m,n). assign n to m and compute ack(m,n) again */
m = n;
ackermann(m, n, l, t, index, size, element, original_m, original_n);

/* now n should have value of A(A(m,n),A(m,n)) */
print n;

halt;
