func decr(x) {
    x = x - 1;
    return;
}

func incr(x) {
    x = x + 1;
    return;
}

func pair(out, in1, in2) {
    out = in2 + (in1 + in2) * (in1 + in2 + 1) / 2;
    return;
}

func unpair(out1, out2, in, t0, t1) {
    t0 = 0;
    t1 = 0; /* invariant: t1 = t0 * (t0 + 1) / 2 */
    while (in >= t1) {
        t0 = t0 + 1;
        t1 = t1 + t0;
    }
    t1 = t1 - t0;
    t0 = t0 - 1;
    out2 = in - t1;
    out1 = t0 - out2;
    return; 
}

func init_stack(stack) {
  stack = 0;
  return;
}

func stack_push(stack, var, t0) {
   t0 = var + 1;   
   pair(stack, t0, stack);
   return;
}

func stack_pop(var, stack, t0, t1) {
   unpair(var, stack, stack, t0, t1);
   var = var - 1;
   return;
}


func log_with_remainder(value, base, log, remainder, q) {
    log = 0;
    remainder = 0;
    q = base;

    while (q <= value) {
        q = base * q;
        incr(log);
    }
    remainder = value - q / base;
    return;
}

func x_power_y(x, y, p) {
    p = 1;
    while (y > 0) {
        p = p * x;
        y = y - 1;
    }
    return;
}

func stein_none_rescursive(n,d,s,wstack,flag_log_phase,r,last_s,temp_var, t0, t1) {
    s = 0;
    flag_log_phase = 1;
    r = n;
    last_s = 0;
    stack_push(wstack, r, t0);
    stack_push(wstack, s, t0);
    
    while (wstack > 0) {
      stack_pop(s, wstack, t0, t1);
      stack_pop(r, wstack, t0, t1);
      ifelse (flag_log_phase == 1) {
            n = r;
            while (n > 0) {
              log_with_remainder(n, d, temp_var, r, last_s);
              stack_push(wstack, r, t0);
              r=0;
              stack_push(wstack, r, t0);
              n=temp_var;
            }
            flag_log_phase = 0;
            last_s = 0;
      } 
      {
        ifelse (s == 0) {
                s = last_s; 
                ifelse (r < d){
                    incr(d);
                    x_power_y(d, s, temp_var);
                    decr(d);
                    s = temp_var;
                    s = s + r;
                    stack_push(wstack, r, t0);
                    stack_push(wstack, s, t0);
                    last_s = 0;
                }
                {  
                    incr(d);
                    x_power_y(d, s, temp_var);
                    decr(d);
                    s = temp_var;
                    stack_push(wstack, r, t0);
                    stack_push(wstack, s, t0);
                    stack_push(wstack, r, t0);
                    temp_var = 0;
                    stack_push(wstack, temp_var, t0);
                    flag_log_phase = 1;
                }
        }
        {
              s = s+last_s;
              last_s = s;
        }
      }
    }
    s = s - 1;
    return;
}

/* global temp variable */
int t0;
int t1;


int stack;
int n;
int base;
int s;
int flag_log_phase;
int r;
int last_s;
int temp_var;


t0 = 0;
t1 = 0;

base = 2;

init_stack(stack);

n=2;

stein_none_rescursive(n,base,s,stack,flag_log_phase,r,last_s, temp_var, t0, t1);
print s;

n=3;
stein_none_rescursive(n,base,s,stack,flag_log_phase,r,last_s, temp_var, t0, t1);
print s;

n=4;
stein_none_rescursive(n,base,s,stack,flag_log_phase,r,last_s, temp_var, t0, t1);
print s;

halt;

